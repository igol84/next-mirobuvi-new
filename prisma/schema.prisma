generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Cart {
  id        String     @id @default(cuid())
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    Int?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        Int    @id @default(autoincrement())
  productId String
  size      Float?
  quantity  Int
  cartId    String
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               Int       @id @default(autoincrement())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  carts            Cart[]
  orders           Order[]
  favoriteProducts String    @default("")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber Int         @unique
  createdAt   DateTime    @default(now())
  firstName   String
  lastName    String
  email       String?
  phone       String
  delivery    String
  status      String
  userId      Int?
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
}

model OrderItem {
  id            Int    @id @default(autoincrement())
  orderId       Int
  productId     String
  productNameEn String
  productNameUa String
  size          Float?
  quantity      Int
  price         Float
  order         Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Brand {
  id           Int       @id @default(autoincrement())
  active       Boolean
  url          String    @unique
  tags         String
  name_en      String
  name_ua      String
  title_en     String
  title_ua     String
  meta_desc_en String
  meta_desc_ua String
  text_ua      String
  text_en      String
  products     Product[]
}

model Product {
  id             Int      @id @default(autoincrement())
  active         Boolean
  private        Boolean
  url            String   @unique
  is_available   Boolean?
  tags           String
  date           DateTime @default(now())
  type           String
  name_en        String
  name_ua        String
  title_en       String
  title_ua       String
  meta_desc_en   String
  meta_desc_ua   String
  text_ua        String
  text_en        String
  price          Float
  old_price      Float
  prom_active    Boolean
  prom_add_to_id Int
  season         String
  color          String
  brand_id       Int
  brand          Brand    @relation(fields: [brand_id], references: [id], onDelete: Restrict)
  shoeses        Shoes[]
}

model Shoes {
  id           Int     @id
  is_available Boolean
  size         Float
  length       Float
  price        Float?
  product_id   Int
  product      Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}
